// Color Balance OFX DCTL

DEFINE_UI_PARAMS(ShadR, Low Cyan Red, DCTLUI_SLIDER_FLOAT, 0, -1, 1, 0.001)
DEFINE_UI_PARAMS(MidR, Mid Cyan Red, DCTLUI_SLIDER_FLOAT, 0, -1, 1, 0.001)
DEFINE_UI_PARAMS(HighR, High Cyan Red, DCTLUI_SLIDER_FLOAT, 0, -1, 1, 0.001)
DEFINE_UI_PARAMS(ShadG, Low Magenta Green, DCTLUI_SLIDER_FLOAT, 0, -1, 1, 0.001)
DEFINE_UI_PARAMS(MidG,  Mid Magenta Green, DCTLUI_SLIDER_FLOAT, 0, -1, 1, 0.001)
DEFINE_UI_PARAMS(HighG, High Magenta Green, DCTLUI_SLIDER_FLOAT, 0, -1, 1, 0.001)
DEFINE_UI_PARAMS(ShadB, Low Yellow Blue, DCTLUI_SLIDER_FLOAT, 0, -1, 1, 0.001)
DEFINE_UI_PARAMS(MidB, Mid Yellow Blue, DCTLUI_SLIDER_FLOAT, 0, -1, 1, 0.001)
DEFINE_UI_PARAMS(HighB, High Yellow Blue, DCTLUI_SLIDER_FLOAT, 0, -1, 1, 0.001)
DEFINE_UI_PARAMS(LUMM, Luma Limiter, DCTLUI_SLIDER_FLOAT, 0, -2, 2, 0.001)
DEFINE_UI_PARAMS(SATT, Saturation Limiter, DCTLUI_SLIDER_FLOAT, 0, -2, 2, 0.001)
DEFINE_UI_PARAMS(PresLum, Preserve Luma, DCTLUI_CHECK_BOX, 1)
DEFINE_UI_PARAMS(ALPHA, View Alpha, DCTLUI_CHECK_BOX, 0)
DEFINE_UI_PARAMS(graph, Graph, DCTLUI_CHECK_BOX, 0)

__CONSTANT__ float pie = 3.14159265358979323f;

__DEVICE__ float rgb_to_sat(float3 rgb);
__DEVICE__ float3 Curve(float3 col, float p_Curve[3], float p_ShadP, float p_HighP, float p_ContP);
__DEVICE__ float Limiter(float val, float limiter);

__DEVICE__ float rgb_to_sat( float3 rgb) {
float sat = 0.0f;
float min = _fminf(_fminf(rgb.x, rgb.y), rgb.z);
float max = _fmaxf(_fmaxf(rgb.x, rgb.y), rgb.z);
float delta = max - min;
if (max != 0.0f)
sat = delta / max;
return sat;
}

__DEVICE__ float3 Curve( float3 col, float p_Curve[3], float p_ShadP, float p_HighP, float p_ContP) {
float tempA[3], tempB[3], COL[3];
COL[0] = col.x; COL[1] = col.y; COL[2] = col.z;
float expr1 = (p_ShadP / 2.0f) - (1.0f - p_HighP)/4.0f;
float expr2 = (1.0f - (1.0f - p_HighP)/2.0f) + (p_ShadP / 4.0f);
float expr3 =  p_ContP < 0.5f ? 0.5f - (0.5f - p_ContP)/2.0f : 0.5f + (p_ContP - 0.5f) / 2.0f;
for( int c = 0; c < 3; ++c){
if(p_Curve[c] != 0){
tempA[c] = (COL[c] - expr1) / (expr2 - expr1);
tempB[c] = tempA[c] > expr3 ? (tempA[c] - expr3) / (2.0f - 2.0f * expr3) + 0.5f : tempA[c] / (2.0f * expr3);
tempA[c] = (((_sinf(2.0f * pie * (tempB[c] -1.0f / 4.0f)) + 1.0f) / 20.0f) * p_Curve[c] * 4.0f) + tempA[c];
COL[c] = COL[c] >= expr1 && COL[c] <= expr2 ? tempA[c] * (expr2 - expr1) + expr1 : COL[c];
}}
return make_float3(COL[0], COL[1], COL[2]);
}

__DEVICE__ float Limiter(float val, float limiter) {
float Alpha = limiter > 1.0f ? val + (1.0f - limiter) * (1.0f - val) : limiter >= 0.0f ? (val >= limiter ? 1.0f : 
val / limiter) : limiter < -1.0f ? (1.0f - val) + (limiter + 1.0f) * val : val <= (1.0f + limiter) ? 1.0f : 
(1.0 - val) / (1.0f - (limiter + 1.0f));
Alpha = _clampf(Alpha, 0.0f, 1.0f);
return Alpha;
}

__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B)
{
float X = (float)p_X;
float Y = (float)p_Y;
float width = (float)p_Width;
float height = (float)p_Height;
Y = height - Y;
float3 RGB = make_float3(p_R, p_G, p_B);
float3 RGB1 = make_float3(X / width, X / width, X / width);
float3 Orig = RGB;
float lumaIn = RGB.x * 0.2126f + RGB.y * 0.7152f + RGB.z * 0.0722f;
float SAT = rgb_to_sat(RGB);
float p_ShadP1 = 400.0f / 1023.0f;
float p_HighP1 = 125.0f / 1023.0f;
float p_ContP1 = 100.0f / 1023.0f;
float p_ShadP2 = 400.0f / 1023.0f;
float p_HighP2 = 500.0f / 1023.0f;
float p_ContP2 = 445.0f / 1023.0f;
float p_ShadP3 = 940.0f / 1023.0f;
float p_HighP3 = 600.0f / 1023.0f;
float p_ContP3 = 890.0f / 1023.0f;
float p_Shad[3] = {ShadR, ShadG, ShadB};
float p_Mid[3] = {MidR, MidG, MidB};
float p_High[3] = {HighR, HighG, HighB};
for( int c = 0; c < 3; ++c){
p_Shad[c] *= 0.5f;p_Mid[c] *= 0.5f;p_High[c] *= 0.5f;
}
if(ShadR != 0.0f || ShadG != 0.0f || ShadB != 0.0f){
RGB = Curve( RGB, p_Shad, p_ShadP1, p_HighP1, p_ContP1);
RGB1 = Curve( RGB1, p_Shad, p_ShadP1, p_HighP1, p_ContP1);
}
if(MidR != 0.0f || MidG != 0.0f || MidB != 0.0f){
RGB = Curve( RGB, p_Mid, p_ShadP2, p_HighP2, p_ContP2);
RGB1 = Curve( RGB1, p_Mid, p_ShadP2, p_HighP2, p_ContP2);
}
if(HighR != 0.0f || HighG != 0.0f || HighB != 0.0f){
RGB = Curve( RGB, p_High, p_ShadP3, p_HighP3, p_ContP3);
RGB1 = Curve( RGB1, p_High, p_ShadP3, p_HighP3, p_ContP3);
}
float alpha = 1.0f;
if(SATT != 0.0f){
SAT = _powf(SAT, 0.5f);
alpha = Limiter(SAT, SATT);
}
if(LUMM != 0.0f)
alpha = alpha * Limiter(lumaIn, LUMM);
if(alpha != 1.0f){
RGB.x = RGB.x * alpha + Orig.x * (1.0f - alpha);
RGB.y = RGB.y * alpha + Orig.y * (1.0f - alpha);
RGB.z = RGB.z * alpha + Orig.z * (1.0f - alpha);
}
if(PresLum){
float lumaOut = RGB.x * 0.2126f + RGB.y * 0.7152f + RGB.z * 0.0722f;
float lumaDiff = lumaIn / lumaOut;
if(lumaIn > 0.0f && lumaOut > 0.0f)
RGB = RGB * lumaDiff;
}
float3 Graph = make_float3(0.0f, 0.0f, 0.0f);
float overlayR = RGB1.x >= (Y - 5)/(height) && RGB1.x <= (Y + 5)/(height) ? 1.0f : 0.0f;
float overlayG = RGB1.y >= (Y - 5)/(height) && RGB1.y <= (Y + 5)/(height) ? 1.0f : 0.0f;
float overlayB = RGB1.z >= (Y - 5)/(height) && RGB1.z <= (Y + 5)/(height) ? 1.0f : 0.0f;
Graph = make_float3(overlayR, overlayG, overlayB);
if(graph)
RGB = RGB + Graph;
if(ALPHA) RGB = make_float3(alpha, alpha, alpha);

return RGB;
}
